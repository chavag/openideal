<?php
/**
 * Implements hook_init().
 */
function ideal_main_init() {
  variable_set('page_manager_user_view_enable',FALSE);
  include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'ideal_main') . '/ideal_main.action.inc';
}

/**
 * Implements hook_permission().
 */
function ideal_main_permission() {
  return array(
    'admin ideas' => array(
      'title' => t('admin ideas'),
      'description' => t('Administer ideas'),
    ),  
  );
}

/**
 * Implements hook_menu().
 */
function ideal_main_menu() {
  $items = array();
  $items['home'] = array(
    'title' => '',
    'page callback' => 'ideal_theme_pages',
    'page arguments' => array('ideal_home_page'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['ideas'] = array(
    'title' => 'All ideas',
    'page callback' => '_empty_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['in-action'] = array(
    'title' => 'Ideas in action',
    'page callback' => '_empty_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/user-interface/openideal'] = array(
    'title' => 'General Configurations',
    'access arguments' => array('access content'),
    'page callback' => 'ideal_main_config_page',
    'page arguments' => array('ideal_main_config_form'),
    'file' => 'ideal_main.admin.inc',  
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/config/user-interface/openideal/general'] = array(
    'title' => 'General Configurations',
    'description' => 'General Configurations', 
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * ideal_theme_pages callback
 */
function ideal_theme_pages($key) {
  return theme($key, array(NULL));
}
function _empty_page() {
  return '';
}

/**
 * Implements hook_block_info().
 */
function ideal_main_block_info() {
  $blocks = array();
  $blocks['category_list'] = array(
    'info' => t('Ideal: Category list for sidebar'),
  );
  $blocks['openideal_credits'] = array(
    'info' => t('OpenideaL credits'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function ideal_main_block_view($delta) {
  if (TRUE) {
    switch ($delta) {
      case 'category_list':
        $block = array(
          'subject' => t('Categories'),
          'content' => theme('ideal_category_list_block'),
        );
        break;
      case 'openideal_credits':
        $block = array(
          'subject' => '',
          'content' => theme('ideal_openideal_credits_block'),
        );
        break;
    }
    return $block;
  }
}

/**
 * Implements hook_theme()
 */
function ideal_main_theme($existing, $type, $theme, $path) {
  return array(
    // theme function for sidebar category list
    'ideal_category_list_block' => array(
      'file' => 'ideal_main.theme.inc',
    ),
    // theme function for footer credits
    'ideal_openideal_credits_block' => array(
      'file' => 'ideal_main.theme.inc',
    ),
    //create a template for home page.
    'ideal_home_page' => array(
      'variables' => array('titles' => NULL),
      'template' => 'home-page',
      'path' => drupal_get_path('module', 'ideal_main'),
    ),
  );
}

/**
 * Count idea nodes for a given taxonomy term 
 */
function ideal_count_term_ideas($tid) {
  $query = db_select('taxonomy_index', 'ti');
  $query->condition('ti.tid', $tid, '=')
        ->fields('ti', array('nid'));
  
  $num_rows = $query->countQuery()->execute()->fetchField();
  return $num_rows;
}


/**
 *  hook_data_alter
 */
function ideal_main_views_data_alter(&$data) {
  $data['node']['uid_voted'] = array(
    'title' => t('User voted'),
    'help' => t('Display nodes only if a user voted on the node.'),
    'argument' => array(
      'field' => 'uid',
      'name table' => 'users',
      'name field' => 'name',
      'handler' => 'views_handler_argument_vote_only_user_uid',
    ),
    'filter' => array(
      'field' => 'uid',
      'name table' => 'users',
      'name field' => 'name',
      'handler' => 'views_handler_filter_vote_only_user_uid',
    ),
  );
  $data['node']['uid_commented'] = array(
    'title' => t('User commented'),
    'help' => t('Display nodes only if a user commented on the node.'),
    'argument' => array(
      'field' => 'uid',
      'name table' => 'users',
      'name field' => 'name',
      'handler' => 'views_handler_argument_idea_comment_only_user_uid',
    ),
    'filter' => array(
      'field' => 'uid',
      'name table' => 'users',
      'name field' => 'name',
      'handler' => 'views_handler_filter_idea_comment_only_user_uid',
    ),
  );
}

/**
 * Implements hook_quicktabs_alter()
 * Add counter to quicktab title.
 */
function ideal_main_quicktabs_alter(&$quicktabs) { 
  $quicktabs_to_alter = array("all_ideas", "ideas_by_category", "in_action");
  if (in_array($quicktabs->machine_name, $quicktabs_to_alter)) {
    foreach ($quicktabs->tabs as $key => $tab){
      
      // find what quicktab instance we're in, and what block this is
      $block = substr($tab['bid'], strpos($tab['bid'], "block"));
      $view = substr($tab['bid'], 0, strpos($tab['bid'], "block")-1);
      $view = substr($view, strpos($view, "delta")+6);
     
      // if this is one of the tabs we want to add the counter to
      if ($view == "ideas_in_action" || ($block == "block_3" && ($view == "ideas_by_category"))) {
        $count = ideal_main_quicktabs_view_counter($view, $block);
        $quicktabs->tabs[$key]['title'] .= " (" . $count . ")";
      }
    }
  }
}

/**
 * Helper function for loading a view and getting the row count.
 */
function ideal_main_quicktabs_view_counter($tab_view, $tab_display, $term=0) {
  $view = views_get_view($tab_view);
  $view->set_display($tab_display);
  if ($term != 0) {
    $view->args[0] = $term;
  }
  else {
    $view->args[0] = arg(1);
  }
  $view->pre_execute();
  $view->execute();
  $count = $view->total_rows ? $view->total_rows : 0;
  return $count;
}

/**
 * Implements theme registry alter
 */
function ideal_main_theme_registry_alter(&$theme_registry){
  // Points to the ideal_main_views_mini_pager function.
  $theme_registry['views_mini_pager']['function'] = "ideal_main_views_mini_pager";

}

/**
 * Overides theme_views_mini_pager, mainly if li_previous and li_next are empty.
 */
function ideal_main_views_mini_pager($vars) {
  global $pager_page_array, $pager_total;
  $tags = $vars['tags'];
  $element = $vars['element'];
  $parameters = $vars['parameters'];
  $quantity = $pager_total[0];

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);
  // current is the page we are currently paged to
  $pager_current = $pager_page_array[$element] + 1;
  // max is the maximum page number
  $pager_max = $pager_total[$element];
  // End of marker calculations.


  $li_previous = theme('pager_previous',
    array(
      'text' => (isset($tags[1]) ? $tags[1] : t('‹‹')),
      'element' => $element,
      'interval' => 1,
      'parameters' => $parameters,
    )
  );
  if (empty($li_previous)) {
      $li_previous = theme('pager_last',
        array(
          'text' => (isset($tags[1]) ? $tags[1] : t('‹‹')),
          'element' => $element,
          'interval' => 1,
          'parameters' => $parameters,
        )
      );
  }

  $li_next = theme('pager_next',
    array(
      'text' => (isset($tags[3]) ? $tags[3] : t('››')),
      'element' => $element,
      'interval' => 1,
      'parameters' => $parameters,
    )
  );
  if (empty($li_next)) {
    $li_next = theme('pager_first',
      array(
        'text' => (isset($tags[3]) ? $tags[3] : t('››')),
        'element' => $element,
        'interval' => 1,
        'parameters' => $parameters,
      )
    );
  }

  if ($pager_total[$element] > 1) {
    $items[] = array(
      'class' => array('pager-previous'),
      'data' => $li_previous,
    );

    $items[] = array(
      'class' => array('pager-current'),
      'data' => t('@current of @max', array('@current' => $pager_current, '@max' => $pager_max)),
    );

    $items[] = array(
      'class' => array('pager-next'),
      'data' => $li_next,
    );
    return theme('item_list',
      array(
        'items' => $items,
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array('class' => array('pager')),
      )
    );
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ideal_main_field_formatter_info() {
  return array(
    'ideal_main_age' => array(
      'label' => t('Age'),
      'field types' => array('datestamp'),
    ),
  );
}
 
/**
 * Implements hook_field_formatter_view()
 */
function ideal_main_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    if($items[0]['date_type'] == 'datestamp') {
      $c_time = date('Y', time());
      $b_time = date('Y', $items[0]['value']);
      $age = $c_time - $b_time;
    }
    $elements[$delta] = array(
      '#markup' => $age,
   );
 }
  return $elements;
}

function ideal_main_comments_link($path = FALSE) {
  if (!$path) {
    $path = current_path();
  }
  global $user;
  if ($user->uid) {
    return l(t('Add comment'), $path, array('fragment' => 'comment-form-id'));
  } else {
    return l(t('Login/Register to post comments'), '/user/login');
  }
}
/**
* Implementation of hook_form_FORM_ID_alter().
*/
function ideal_main_form_alter(&$form, $form_state) {
  switch ($form['form_id']['#value']) {
    case 'user_admin_settings':
      $form['personalization']['pictures']['user_picture_default'] = array(
      '#title' => t('Image'),
      '#type' => 'managed_file',
      '#description' => t('The uploaded image will be displayed on this page using the image style choosen below.'),
      '#default_value' => variable_get('user_picture_default', ''),
      '#upload_location' => 'public://',
      );
      break;
    case 'user_pass':
      $form['#submit'][] = 'ideal_main_redirect_to_user_login';
    default:
      break;
  }
}

function ideal_main_redirect_to_user_login($form, &$form_state) {
  $form_state['redirect'] = 'user/login';  
}

function ideal_main_preprocess_user_picture(&$variables) {
  $variables['user_picture'] = '';
  if (variable_get('user_pictures', 0)) {
    $account = $variables['account'];
    if (!empty($account->picture)) {
      // @TODO: Ideally this function would only be passed file objects, but
      // since there's a lot of legacy code that JOINs the {users} table to
      // {node} or {comments} and passes the results into this function if we
      // a numeric value in the picture field we'll assume it's a file id
      // and load it for them. Once we've got user_load_multiple() and
      // comment_load_multiple() functions the user module will be able to load
      // the picture files in mass during the object's load process.
      if (is_numeric($account->picture)) {
        $account->picture = file_load($account->picture);
      }
      if (!empty($account->picture->uri)) {
        $filepath = $account->picture->uri;
      }
    }
     elseif (variable_get('user_picture_default', '')) {

      $filepath = file_load(variable_get('user_picture_default', ''));
      $account->picture = $filepath;
      if($account->uid != 0)
        user_save($account);
    }

    if (isset($filepath)) {
      $alt = t("@user's picture", array('@user' => format_username($account)));
      // If the image does not have a valid Drupal scheme (for eg. HTTP),
      // don't load image styles.
      if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
        $variables['user_picture'] = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
      else {
        $variables['user_picture'] = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
      if (!empty($account->uid) && user_access('access user profiles')) {
        $attributes = array('attributes' => array('title' => t('View user profile.')), 'html' => TRUE);
        $variables['user_picture'] = l($variables['user_picture'], "user/$account->uid", $attributes);
      }
    }
  }
}




function ideal_main_form_user_register_form_alter(&$form, &$form_state) {
  $form['hybridauth']['#weight'] = -100 ;
  $form['account']['name']['#weight'] = 1;                
  $form['account']['mail']['#weight'] = 2;   
  $form['account']['pass']['#weight'] = 3; 
  $form['field_bio']['#weight'] = 4;  
  $form['field_bio']['#access'] = TRUE;
  // $form['picture']['#access'] = TRUE;
  // $form['picture']['picture_upload']['#weight'] = 5;     
  $form['field_comment_notficiations']['#access'] = FALSE;  
  $form['field_content_notifications']['#access']  = FALSE;

  // $form['picture']['picture_delete']['#access'] = !empty($account->picture->fid) &&
  // $account->picture->fid != variable_get('user_picture_default');
}

function ideal_main_form_user_login_alter(&$form, &$form_state) {
 $form['hybridauth']['#weight'] = 0 ;          
}

function ideal_main_form_user_profile_form_alter(&$form, &$form_state) {
  $hidden_fields = array(
    'field_user_address',
    'field_user_date_birth', 
    'contact', 
    'account' => array('roles', 'status')
  );

  $form = ideal_main_set_form_properties($form, $hidden_fields,  array('#access' => false));

  //move bio field to be near the name field
  $form['account']['field_bio'] = $form['field_bio'];
  $form['account']['field_bio']['#weight'] = -9;
  $form['account']['field_bio']['#attributes']['class'][] = 'form-item';
  unset($form['field_bio']);

  //move picture field to password confirm fieldset
  $form['pass'] = $form['account']['pass'];
  unset($form['account']['pass']);

}

/**
 * set properties of given form by given properties array
 */
function ideal_main_set_form_properties($form, $hidden_fields, $properties) {
  foreach($hidden_fields as $key => $value) {
    if (isset($form[$key])) {
      $form[$key] = ideal_main_set_form_properties($form[$key], $value,  array('#access' => false));
    } else {
      foreach($properties as $prop => $prop_val) {
        $form[$value][$prop] = $prop_val;  
      }  
    }
  }
  return $form;
}


/**
 * Template preprocess function for hybridauth_widget.
 */
function ideal_main_preprocess_hybridauth_widget(&$vars, $hook) {
  $element = $vars['element'];
  $vars['providers'] = array();
  foreach ($element['providers'] as $provider) {
    $vars['providers'][] = l(t('Login by !span Facebook !close_span', 
      array('!span' => '<span>', '!close_span' => '</span>')), $provider['path'], $provider['options']);
  }
}


/**
* Implements hook_node_presave
*/
function ideal_main_node_presave($node) {
  global $user;
  if (isset($node->field_moderator['und']) && count($node->field_moderator['und']) == 0) {
    $node->field_moderator[LANGUAGE_NONE][0]['target_id'] = $user->uid;
  }
}

function ideal_main_get_editing_url($uid) {
  $path = "members/" . $uid . "/edit";
  if ($router_item = menu_get_item($path)) {
    if ($router_item['access']) {
      return l(t('Editing'), $path);
    }
  }
  return '';
}

function ideal_main_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  global $user;
  if ($path == 'user/' . $user->uid . '/edit') {
    $path = 'members/' . $user->uid . '/edit';
  }
}

